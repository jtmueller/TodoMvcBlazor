@if (State.Todos.Count > 0) {
    <section class="main">
        <input id="toggle-all" class="toggle-all" type="checkbox" onchange=@(e => State.ToggleAll((bool)e.Value)) />
        <label for="toggle-all">Toggle All</label>
        <ul class="todo-list">
            <!-- List items should get the class `editing` when editing and `completed` when marked as completed -->
            @foreach (var (todo, i) in FilteredTodos.WithIndex()) {
                <li class=@GetClass(todo)>
                    <div class="view">
                        <input id=@("todo" + i) class="toggle" type="checkbox" bind=@todo.Completed />
                        <label for=@("todo" + i) onclick=@(() => ItemClick(todo))>@todo.Text</label>
                        <button class="destroy" onclick=@(() => State.RemoveTodo(todo))></button>
                    </div>
                    <input class="edit" value=@todo.Text onchange=@(e => SaveEdit((string)e.Value)) />
                </li>
            }
        </ul>
    </section>
}

@functions {
    public AppState State { get; set; }

    public IEnumerable<Todo> FilteredTodos
    {
        get 
        {
            if (string.IsNullOrEmpty(Filter) || Filter == "all") 
                return State.Todos;

            if (Filter == "active")
                return State.Active;

            return State.Completed;
        }
    }

    public string Filter { get; set; }

    private string GetClass(Todo todo)
    {
        if (ReferenceEquals(todo, _editing))
            return "editing";

        if (todo.Completed)
            return "completed";

        return string.Empty;
    }

    private DateTime _lastClick = DateTime.MinValue;
    private Todo _editing;

    private void ItemClick(Todo todo)
    {
        // toggle (in case this is a single click)
        todo.Completed = !todo.Completed;

        var now = DateTime.UtcNow;
        if ((now - _lastClick).TotalMilliseconds < 500)
        {
            // it's a double-click
            _editing = todo;
        }
        _lastClick = now;
    }

    private void SaveEdit(string text)
    {
        _editing.Text = text;
        _editing = null;
    }

    protected override void OnParametersSet() =>
        State.OnChange += StateHasChanged;
}