@if (Todos.Count > 0) {
    <section class="main">
        <input id="toggle-all" class="toggle-all" type="checkbox" @onchange(v => ToggleAll((bool)v))>
        <label for="toggle-all">Toggle All</label>
        <ul class="todo-list">
            <!-- These are here just to show the structure of the list items -->
            <!-- List items should get the class `editing` when editing and `completed` when marked as completed -->
            @for (int i = 0; i < Todos.Count; i++) {
                var todo = Todos[i];
                <li class='@(todo.Completed ? "completed" : "")'>
                    <div class="view">
                        <input id=@("todo" + i) class="toggle" type="checkbox" @bind(todo.Completed)>
                        <label for=@("todo" + i)>@todo.Text</label>
                        <button class="destroy" @onclick(() => Remove(todo))></button>
                    </div>
                    <input class="edit" value="@todo.Text">
                </li>
            }
        </ul>
    </section>
}

@functions {
    public ObservableCollection<Todo> Todos { get; set; }
    
    private void Remove(Todo todo)
    {
        Todos.Remove(todo);
    }

    private void ToggleAll(bool isChecked)
    {
        foreach (var td in Todos)
        {
            td.Completed = isChecked;
        }
    }

    protected override void OnParametersSet()
    {
        Todos.CollectionChanged += (s,e) => this.StateHasChanged();
    }
}