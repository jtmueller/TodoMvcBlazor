@if (Todos.Count > 0) {
    var pendingCount = Todos.Count(t => !t.Completed);
    <footer class="footer">
        <span class="todo-count"><strong>@pendingCount</strong> @(pendingCount == 1 ? "item" : "items") left</span>
        <ul class="filters">
            <li>
                <a class=@SelectedClass("all") href="all">All</a>
            </li>
            <li>
                <a class=@SelectedClass("active") href="active">Active</a>
            </li>
            <li>
                <a class=@SelectedClass("completed") href="completed">Completed</a>
            </li>
        </ul>
        @if (Todos.Any(t => t.Completed)) {
            <button class="clear-completed" @onclick(ClearCompleted)>Clear completed</button>
        }
    </footer>
}

@functions {
    public ObservableCollection<Todo> Todos { get; set; }

    private string _filter;
    public string Filter
    {
        set => _filter = value;
        get => string.IsNullOrEmpty(_filter) ? "all" : _filter;
    }

    private string SelectedClass(string selection) => 
        selection == Filter ? "selected" : "";

    private void ClearCompleted()
    {
        var completed = Todos.Where(t => t.Completed).ToArray();
        
        foreach (var todo in completed)
        {
            Todos.Remove(todo);
        }
    }

    protected override void OnParametersSet()
    {
        // update the count when the collection changes
        Todos.CollectionChanged += (s,e) => 
        {
            foreach (var todo in Todos)
            {
                // ensure we update if any item changes, and that we're only subscribed once
                todo.PropertyChanged -= OnItemChanged;
                todo.PropertyChanged += OnItemChanged;
            }
            this.StateHasChanged();
        };
    }

    private void OnItemChanged(object sender, PropertyChangedEventArgs e) => this.StateHasChanged();
}
